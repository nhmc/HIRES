#!/usr/bin/env python
#from __future__ import division, print_function, unicode_literals

import sys, os
from glob import glob
from astropy.time import Time
from HIRES.core import find_trace
import astropy.io.fits as fits
from subprocess import call
import numpy as np

if sys.version[0] > '2':
    raw_input = input


STANDARD_PATTERNS = {'feige', 'fiege', 'bd', 'kp', 'g191'}

def get_mjd_time(filename):
    mjd = float(fits.getval(filename, 'MJD'))
    # this is actually a few seconds off the 'DATE' value, but don't
    # worry about this for now.
    t = Time(mjd, scale='utc', format='mjd')
    return t

def is_newccd(filename):
    """ Check whether this is an observation taken with the new (3) ccd(s)
    """
    fh = fits.open(filename)
    out = False
    if len(fh) == 4:
        out = True

    fh.close()
    return out

def split_ccds(name):
    fh = fits.open(name)
    if all(fh[i].header['BITPIX'] == 16 for i in (1, 2, 3)):
        call('HIRES2_readwrite %s mode=5' % name, shell=1)
    else:
        hd0 = fh[0].header
        for i in (1, 2, 3):
            n = name.replace('.fits', '_%i.fits' % i)
            hd = fh[i].header
            for key in hd0:
                if key not in hd and key != 'EXTEND' and len(key) < 9 and \
                       key not in ('EXTEND', 'COMMENT', ''):
                    try:
                        #print(repr(key))
                        hd.update(key, hd0[key])
                    except:
                        import pdb; pdb.set_trace()
            data = fh[i].data
            fits.writeto(n, data, header=hd, clobber=1)

    fh.close()
    

if len(sys.argv[1:]) == 0:
    setups = sorted(glob('setup*'))
else:
    setups = sorted(glob(sys.argv[1]))

fhlog = open('HIRES_create_Makee_scripts.log', 'wt')


commands = ['rm -rf %s/raw/*_?.fits setup*/obj* /setup*/std*' % s for
            s in setups]

s = ("""\
Removing old files and directories with the following commands:
""" + '\n'.join(commands) + 
"""

Is this ok? (Y/n) """)

c = raw_input(s)
if c and c[0].lower() == 'n':
    sys.exit()

for c in commands:
    call(c, shell=1)

for setup in setups:
    rawdir = setup + '/raw'
    s = '#### ' + setup + ' ####'
    print(s)
    fhlog.write(s + '\n')
    fhout = open(setup + '/makee.sh', 'wt')
    obj = sorted(glob(rawdir + '/obj*.fits'))
    obj += sorted(glob(rawdir + '/std*.fits'))
    arcs = sorted(glob(rawdir + '/ThAr*.fits'))
    flats = sorted(glob(rawdir + '/medflat_*.fits'))
    if 0 in (len(flats), len(obj), len(arcs)):
        print('Not enough files for reduction, skipping')
        continue

    if os.path.exists(rawdir + '/trace.fits'):
        s = 'trace.fits exists, not overwriting'
        print(s)
        fhlog.write(s + '\n')        
    elif len(obj) > 0:
        try:
            cand = find_trace(obj[0])
        except RuntimeError:
            print('No trace found :(')
            continue
        for c in cand:
            # take the one with a name like a standard
            if any(s in c[0] for s in STANDARD_PATTERNS):
                tname, trace = c
                break
        else:
            # just take the first one
            tname, trace = cand[0]
        s = 'Found best trace %s, downloading %s' % (tname.strip(), trace)
        print(s)
        fhlog.write(s + '\n')
        print('download_koa %s %s/trace.fits' % (trace, rawdir))
        call('download_koa %s %s/trace.fits' % (trace, rawdir), shell=1)

    if is_newccd(rawdir + '/trace.fits'):
        split_ccds(rawdir + '/trace.fits')

    tarcs = [get_mjd_time(n) for n in arcs]
    tflats = [get_mjd_time(n) for n in flats]
    for n in obj:
        objdir = setup + '/' + os.path.split(n)[1].replace('.fits', '')
        s = 'Creating directory %s/' % objdir
        print(s)
        fhlog.write(s + '\n')
        call('mkdir ' + objdir, shell=1)
        objdir1 = os.path.split(objdir)[1]
        fhout.write('cd ' + objdir1 + '\n')

        t = get_mjd_time(n)
        diff = [(tarc - t).sec for tarc in tarcs]
        i = np.abs(diff).argmin()
        arc = arcs[i]
        diff = [(tflat - t).sec for tflat in tflats]
        i = np.abs(diff).argmin()
        flat = flats[i]
        if is_newccd(arc):
            split_ccds(arc)
        if is_newccd(n):
            split_ccds(n)
        if is_newccd(flat):
            split_ccds(flat)
        
        obj  = '../raw/' + os.path.split(n)[1]
        flat = '../raw/' + os.path.split(flat)[1]
        arc  = '../raw/' + os.path.split(arc)[1]
        if is_newccd(n):
            for i in (1, 2, 3):
                obj1 = obj.replace('.fits', '_%i.fits' % i)
                flat1 = flat.replace('.fits', '_%i.fits' % i)
                arc1 = arc.replace('.fits', '_%i.fits' % i)
                s = 'makee %s ../raw/trace_%i.fits %s %s ccd=%i\n' % (
                    obj1, i, flat1, arc1, i)
                print(s)
                fhlog.write(s)
                fhout.write(s)
        else:
            # note no skyshift for older ccds
            s = 'makee %s ../raw/trace.fits %s %s -noskyshift\n' % (
                obj, flat, arc)
            print(s)
            fhlog.write(s)
            fhout.write(s)
        fhout.write('cd ..\n\n')
    fhout.close()

fhlog.close()
