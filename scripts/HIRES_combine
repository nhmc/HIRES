#!/usr/bin/env python
import numpy as np

from math import sqrt
import os
from glob import glob

from barak.convolve import convolve_psf
from barak.utilities import between, stats
from barak.io import writetable

import pylab as plt

np.seterr(divide='ignore')


# bad regions are mostly sky lines
# s.masked[between(wa, 4879.9, 4881.6)] = True
# s.masked[between(wa, 5429.7, 5431.4)] = True
# s.masked[between(wa, 5577.7, 5578.3)] = True
# s.masked[between(wa, 5599, 5601)] = True 
# s.masked[between(wa, 5890.4, 5890.9)] = True
# s.masked[between(wa, 5896.5, 5896.9)] = True
# s.masked[between(wa, 6798.4, 6798.6)] = True
# s.masked[between(wa, 6864.5, 6865.2)] = True

MASKS = {
    #67: [(6320.8, 6321.4)],
    # 205:[(4380., 4430.)], 
    # 206:[(4380., 4430.)], 
    # 207:[(4380., 4430.)], 
    # 208:[(4380., 4430.)], 
    # 209:[(4380., 4430.)], 
    # 210:[(4380., 4430.)],
    # 214:[(4395., 4410.)], 
    # 215:[(4395., 4410.)], 
    # 216:[(4395., 4410.)], 
    # 217:[(4395., 4410.)], 
    # 218:[(4395., 4410.)], 
    # 219:[(4395., 4410.)],
    # 220:[(4395., 4410.)], 
    # 221:[(4395., 4410.)], 
    # 222:[(4395., 4410.)], 
    # 223:[(4395., 4410.)],
    }


def make_sky(skyvals, ervals):
    """ Make a rough combination of the background for all orders.
    """
    sky2d = np.array(skyvals)
    er2d = np.array(ervals)    
    sky2d[~(er2d > 0)] = np.nan
    sky = np.nansum(sky2d, axis=0)
    sky2d[~np.isnan(sky2d)] = 1
    sky = sky / np.nansum(sky2d, axis=0)
    return sky

def combine(fl, er, ser, mask, NSIG=3):
    """ Combine spectra, weighting flux by the smoothed error and
    clipping pixels with high residuals, and masking the requested
    pixels.

    in:  fluxes (m x n), errors (m x n), smoothed errors (m x n), mask (m x n)
    out: flux (n), error (n), npts (n), clipped (m x n) 

    m is the number of spectra, n is the number of pixels in each spectrum.
    """
    median = np.median
    good = (er > 0) & ~mask

    Nspec, Npix = fl.shape

    clipped = np.zeros(fl.shape, bool)
    cfl = []
    cer = []
    npts = []
    for i in range(Npix):
    #for i in range(26526, 26526+1000):
            
        if not i % 5000: print i

        ftot = 0
        etot = 0
        wtot = 0
        n = 0

        c0 = good[:, i-1:i+2]
        vals = fl[:, i-1:i+2][c0]
        #plt.plot([i]*len(vals), vals, '.', ms=1, alpha=0.5)
        if len(vals) > 0:
            med = median(vals)
            for j in range(Nspec):
                if not er[j,i] > 0:
                    continue
                if mask[j,i]:
                    #print 'Masked spectrum %i pixel %i' % (j, i)
                    continue
                
                resid = (fl[j,i] - med)/er[j,i]
                if abs(resid) > NSIG:
                    clipped[j,i] = True 
                    continue

                w = ser[j,i]**-2
                ftot += fl[j,i] * w
                etot += (er[j,i] * w)**2
                wtot += w
                n += 1

        if wtot == 0:
            f = np.nan
            if len(vals) > 5:
                f = med
            e = 0
        else:
            f = ftot / wtot
            e = sqrt(etot) / wtot
        cfl.append(f)
        cer.append(e)
        npts.append(n)

    #plt.show()
    return np.array(cfl), np.array(cer), np.array(npts), clipped

if 1:
    mults = np.load('multipliers.npy')
    sp = []
    print 'Applying scaling and masking regions'
    for i,name in enumerate(sorted(glob('./rebinned/*.npy'))):
        s = np.load(name).view(np.recarray)
        # smoothed error
        clipped = np.zeros(len(s.fl), bool)
        masked = np.zeros(len(s.fl), bool)
        masked[-5:] = True
        if i in MASKS:
            print 'Masking spectrum %i' % i
            for w0,w1 in MASKS[i]:
               masked = masked | between(s.wa, w0, w1)
        fl = s.fl * mults[i]
        er = s.er * mults[i]
        ser = convolve_psf(er, 25)
        sp.append(np.rec.fromarrays([s.wa, fl, er, ser, clipped, masked,
                                     s.bg],
                                    names='wa,fl,er,ser,clipped,masked,bg'))

    wa = sp[0].wa

if 1:
    print 'combining spectra'
    # combine spectra, weighting flux by the smoothed error


    fl = np.array([s.fl for s in sp])
    er = np.array([s.er for s in sp])
    ser = np.array([s.ser for s in sp])
    masks = np.array([s.masked for s in sp])

if 1:
    fl, er, npts, clipped = combine(fl, er, ser, masks)
    for i,s in enumerate(sp):
        s.clipped = clipped[i]
        np.save('./rebinned/%03i.npy' % i, s)
    
    # now combine the sky
    bg = make_sky([s.bg for s in sp], [s.er for s in sp])

    rec = np.rec.fromarrays([wa,fl,er,npts,bg],names='wa,fl,er,npts,bg')
    writetable('combined.fits', rec, overwrite=True)
