#!/usr/bin/env python
from glob import glob
import numpy as np
import os, sys
import pyfits

from HIRES.core import get_datetime

saturation_thresh = 60000

if len(sys.argv[1:]) == 0:
    setups = sorted(glob('setup*'))
else:
    setups = sorted(glob(sys.argv[1]))

def num_saturated(d):
    c0 = np.isnan(d)
    return (d[c0] > saturation_thresh).sum()

def fix_nan(d):
    """ Replace nan with the image mean. This is so we can use the
    fast median routine, that doesn't handle nans properly.
    """
    c0 = np.isnan(d) 
    d[c0] = np.nansum(d) / (~c0).sum()
    return d

flats = {}
for setup in setups:
    flats[setup] = {}
    filenames = glob(setup + '/flat_*.fits')
    for n in filenames:
        #print n
        n1 = os.path.split(n)[1]
        date = get_datetime(n).split('T')[0]
        if date in flats[setup]:
            flats[setup][date].append(n1)
        else:
            flats[setup][date] = [n1]


for setup in sorted(flats):
    hdold = hdb = hdg = hdr = None
    old = []
    b = []
    g = []
    r = []
    for date in sorted(flats[setup]):
        print setup, date
        for i,n in enumerate(flats[setup][date]):
            print ' ', n
            name = os.path.join(setup,n)
            fh = pyfits.open(name)
            if len(fh) == 4:
                # New detector
                d = fh[1].data
                n = num_saturated(d)
                if n > 0:
                    print '%d b pixels saturated' % n
                b.append(fix_nan(d))
                if hdb is None:
                    hdb = fh[0].header
                d = fh[2].data
                n = num_saturated(d)
                if n > 0:
                    print '%d g pixels saturated' % n
                g.append(fix_nan(d))
                if hdg is None:
                    hdg = fh[0].header
                d = fh[3].data
                n = num_saturated(d)
                if n > 0:
                    print '%d r pixels saturated' % n
                r.append(fix_nan(d))
                if hdr is None:
                    hdr = fh[0].header
            else:
                # old detector
                d = fh[0].data
                #import pdb; pdb.set_trace()
                n = num_saturated(d)
                if n > 0:
                    print '%d pixels saturated' % n
                old.append(fix_nan(d))                    
                if hdold is None:
                    hdold = fh[0].header
        
        if len(old) > 0:
            print '  Taking median of %i flats' % len(old)
            flat = np.median(old, axis=0)
            hdold.update('HIERARCH MKFLAT_NCOMB', len(old), comment='Number of images contribution to median')
            name = os.path.join(setup, 'medflat_' + date + '.fits')
            pyfits.writeto(name, flat, clobber=1, header=hdold)
        if len(b) > 0:
            print '  Taking median of %i blue flats' % len(b)
            flat = np.median(b, axis=0)
            hdb.update('HIERARCH MKFLAT_NCOMB', len(b), comment='Number of images contribution to median')
            name = os.path.join(setup, 'medflat_b_' + date + '.fits')
            pyfits.writeto(name, flat, clobber=1, header=hdb)
        if len(g) > 0:
            print '  Taking median of %i green flats' % len(g)
            flat = np.median(g, axis=0)
            hdg.update('HIERARCH MKFLAT_NCOMB', len(g), comment='Number of images contribution to median')
            name = os.path.join(setup, 'medflat_g_' + date + '.fits')
            pyfits.writeto(name, flat, clobber=1, header=hdg)
        if len(r) > 0:
            print '  Taking median of %i red flats' % len(r)
            flat = np.median(r, axis=0)
            hdr.update('HIERARCH MKFLAT_NCOMB', len(r), comment='Number of images contribution to median')
            name = os.path.join(setup, 'medflat_r_' + date + '.fits')
            pyfits.writeto(name, flat, clobber=1, header=hdr)
        if len(old) == len(b) == len(g) == len(r) == 0:
            print '  No good flats found!'
