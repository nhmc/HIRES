#!/usr/bin/env python
from glob import glob
import numpy as np
import os, sys
import pyfits as fits

from HIRES.core import get_datetime

saturation_thresh = 60000

if len(sys.argv[1:]) == 0:
    setups = sorted(glob('setup*/raw'))
else:
    setups = sorted(glob(sys.argv[1]))

def num_saturated(d):
    c0 = np.isnan(d)
    return (d[c0] > saturation_thresh).sum()

def fix_nan(d):
    """ Replace nan with the image mean. This is so we can use the
    fast median routine, that doesn't handle nans properly.
    """
    c0 = np.isnan(d) 
    d[c0] = np.nansum(d) / (~c0).sum()
    return d

flats = {}
for setup in setups:
    flats[setup] = {}
    filenames = glob(setup + '/flat_*.fits')
    for n in filenames:
        #print n
        n1 = os.path.split(n)[1]
        date = get_datetime(n).split('T')[0]
        if date in flats[setup]:
            flats[setup][date].append(n1)
        else:
            flats[setup][date] = [n1]


for setup in sorted(flats):
    ref = None
    old = []
    new = []
    for date in sorted(flats[setup]):
        print setup, date
        for i,n in enumerate(flats[setup][date]):
            print ' ', n
            name = os.path.join(setup,n)
            fh = fits.open(name)
            if ref is None:
                ref = name
            if len(fh) == 4:
                # New detector
                b = fh[1].data
                n = num_saturated(b)
                if n > 0:
                    print '%d b pixels saturated' % n
                g = fh[2].data
                n = num_saturated(g)
                if n > 0:
                    print '%d g pixels saturated' % n
                r = fh[3].data
                n = num_saturated(r)
                if n > 0:
                    print '%d r pixels saturated' % n
                new.append(map(fix_nan, (b,g,r)))
            else:
                # old detector
                d = fh[0].data
                #import pdb; pdb.set_trace()
                n = num_saturated(d)
                if n > 0:
                    print '%d pixels saturated' % n
                old.append(fix_nan(d))                    
        
        if len(old) > 0:
            print '  Taking median of %i flats' % len(old)
            flat = np.median(old, axis=0)
            fh = fits.open(ref)
            fh[0].header.update(
                'HIERARCH MKFLAT_NCOMB', len(old),
                comment='Number of images contribution to median')
            fh[0].data = flat
            name = os.path.join(setup, 'medflat_' + date + '.fits')
            fh.writeto(name, clobber=1)
        if len(new) > 0:
            print '  Taking median of %i b flats' % len(new)
            bflat = np.median([n[0] for n in new], axis=0)
            print '  Taking median of %i g flats' % len(new)
            gflat = np.median([n[1] for n in new], axis=0)
            print '  Taking median of %i r flats' % len(new)
            rflat = np.median([n[2] for n in new], axis=0)

            fh = fits.open(ref)
            fh[0].header.update(
                'HIERARCH MKFLAT_NCOMB', len(new),
                comment='Number of images contribution to median')
            fh[1].data = bflat
            fh[2].data = gflat
            fh[3].data = rflat
            name = os.path.join(setup, 'medflat_' + date + '.fits')
            fh.writeto(name, clobber=1)
        if len(old) == len(new) == 0:
            print '  No good flats found!'
